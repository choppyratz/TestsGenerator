using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;


namespace TestsGenerator
{
    public class Generator
    {
        private List<string> usings = new List<string>() { 
            "Sysytem", 
            "Microsoft.VisualStudio.TestTools.UnitTesting" 
        };

        public string GenerateUnitTestClass(string source)
        {
            var syntaxFactory = SyntaxFactory.CompilationUnit();

            syntaxFactory = AddUsings(usings, syntaxFactory);

            var @namespace = SyntaxFactory.NamespaceDeclaration(SyntaxFactory.ParseName("TestGeneratorUnitTests")).NormalizeWhitespace();

            var classDeclaration = SyntaxFactory.ClassDeclaration("UnitTest1");

            classDeclaration = classDeclaration.AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword));

            classDeclaration = classDeclaration.WithAttributeLists(
                classDeclaration.AttributeLists.Add(
                    SyntaxFactory.AttributeList(
                        SyntaxFactory.SingletonSeparatedList(
                            SyntaxFactory.Attribute(
                                SyntaxFactory.IdentifierName("TestClass")
                                ).NormalizeWhitespace()
                            )
                        )
                    )
                );

            var testMethods = new List<MethodDeclarationSyntax>();
            for (int i = 0; i < MethodsCount(source); i++) {
                var methodDeclaration = AddMethod("void", "TestMethod" + (i + 1).ToString());
                testMethods.Add(methodDeclaration);
            }

            classDeclaration = classDeclaration.AddMembers(testMethods.ToArray());

            @namespace = @namespace.AddMembers(classDeclaration);

            syntaxFactory = syntaxFactory.AddMembers(@namespace);

            var code = syntaxFactory
                .NormalizeWhitespace()
                .ToFullString();

            return code;
        }

        public CompilationUnitSyntax AddUsings(List<string> usings, CompilationUnitSyntax CUS)
        {
            foreach (var usingName in usings)
            {
                CUS = CUS.AddUsings(SyntaxFactory.UsingDirective(SyntaxFactory.ParseName(usingName)));
            }
            return CUS;
        }

        public int MethodsCount (string source)
        {
            SyntaxTree tree = SyntaxFactory.ParseSyntaxTree(source);

            IEnumerable<MethodDeclarationSyntax> methods = tree
              .GetRoot()
              .DescendantNodes()
              .OfType<MethodDeclarationSyntax>();

            return methods.Count();
        }

        public MethodDeclarationSyntax AddMethod(string returnType, string methodName)
        {
            var syntax = SyntaxFactory.ParseStatement("Assert.Fail(\"Autogenerated\");");
            var methodDeclaration = SyntaxFactory.MethodDeclaration(SyntaxFactory.ParseTypeName(returnType), methodName)
                .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
                .WithBody(SyntaxFactory.Block(syntax));

            methodDeclaration = methodDeclaration.AddAttributeLists(
                SyntaxFactory.AttributeList(
                        SyntaxFactory.SingletonSeparatedList(
                            SyntaxFactory.Attribute(
                                SyntaxFactory.IdentifierName("TestMethod")
                                ).NormalizeWhitespace()
                            )
                        )
                    );
            return methodDeclaration;
        }
    }
}
